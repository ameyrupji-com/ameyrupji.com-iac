version: 2.1

references:

orbs:
  aws-cli: circleci/aws-cli@5.1.1
  aws-s3: circleci/aws-s3@4.1.1

build_image: &build_image
  cimg/python:3.12

base_image: &base_image
  hashicorp/terraform:1.12.0

working_directory: &working_directory
  /home/circleci/ameyrupji-iac

build_config: &build_config
  docker:
    - image: *build_image
  working_directory: *working_directory

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory

build_repo_cache_key: &build_repo_cache_key
  ameyrupji-iac-build-{{ .Branch }}-{{ .Revision }}

repo_cache_key: &repo_cache_key
  ameyrupji-iac-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

restore_build_repo: &restore_build_repo
  restore_cache:
    key: *build_repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

save_build_repo: &save_build_repo
  save_cache:
    key: *build_repo_cache_key
    paths:
      - *working_directory

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      [[ $CIRCLE_BRANCH == "master" || $CIRCLE_BRANCH == "hotfix" ]] && ENV="prod" || ENV="beta"
      echo "ENV:"
      echo $ENV
      ENV_DIRECTORY="environments/${ENV}/."
      echo "ENV_DIRECTORY:"
      echo $ENV_DIRECTORY
      cd /home/circleci/ameyrupji-iac/terraform
      mkdir workspace
      cp -R src/. ${ENV_DIRECTORY} workspace/
      cd workspace
      ls -la
      terraform -v
      terraform init

apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          cd /home/circleci/ameyrupji-iac/terraform
          cd workspace
          ls -la
          terraform apply --auto-approve terraform.plan
jobs:
  zip:
    <<: *build_config
    steps:
      - checkout
      - run: 
          name: zip lambdas
          command: | 
            cd code/
            python package-lambdas.py
            cd ..
      - *save_build_repo
  upload-branch:
    <<: *build_config
    steps:
      - *restore_build_repo
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-s3/copy:
          from: /home/circleci/ameyrupji-iac/code/lambdas/zipped/ 
          to: 's3://beta.ameyrupji.com-assets/${CIRCLE_BRANCH}'
          arguments: --recursive
      - *save_repo
  upload-develop:
    <<: *build_config
    steps:
      - *restore_build_repo
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-s3/copy:
          from: /home/circleci/ameyrupji-iac/code/lambdas/zipped/ 
          to: 's3://beta.ameyrupji.com-assets/develop'
          arguments: --recursive
      - *save_repo
  upload-master:
    <<: *build_config
    steps:
      - *restore_build_repo
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-s3/copy:
          from: /home/circleci/ameyrupji-iac/code/lambdas/zipped/ 
          to: 's3://ameyrupji.com-assets/master'
          arguments: --recursive
      - *save_repo
  build:
    <<: *default_config
    steps:
      - *restore_repo
      - run:
          name: terraform fmt
          command: |
            cd /home/circleci/ameyrupji-iac/terraform
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Format of this terraform files is not appropriate:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .
              echo
              echo "Please run terraform fmt"
              exit 1
            fi
      - *save_repo
  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            cd /home/circleci/ameyrupji-iac/terraform
            cd workspace
            ls -la
            terraform plan -var="lambda-version=${CIRCLE_BRANCH}" -out=terraform.plan 
      - persist_to_workspace:
          root: /home/circleci/ameyrupji-iac/
          paths:
            - terraform/workspace/terraform.plan
  apply:
    <<: *apply_job
  apply-with-approval:
    <<: *apply_job

workflows:
  version: 2
  build_plan_approve_apply:
    jobs:
      - zip
      - upload-branch:
          requires:
            - zip
          filters:
            branches:
              ignore: 
                - master
                - develop
                - /release.*/
      - upload-develop:
          requires:
            - zip
          filters:
            branches:
              only: develop
      - upload-master:
          requires:
            - zip
          filters:
            branches:
              only: master
      - build:
          requires:
            - upload-branch
            - upload-master
            - upload-develop
      - plan:
          requires:
            - build
      - approve:
          type: approval
          requires:
            - plan
          filters:
            branches:
              only: 
                - master
                - /feature.*/
                - /bugfix.*/
                - /hotfix.*/
      - apply-with-approval:
          requires:
            - approve
          filters:
            branches:
              only: 
                - master
                - /feature.*/
                - /bugfix.*/
                - /hotfix.*/
      - apply:
          requires:
            - plan
          filters:
            branches:
              ignore: 
                - master
                - /feature.*/
                - /bugfix.*/
                - /hotfix.*/
